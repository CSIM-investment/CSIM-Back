# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  username: String!
}

type CryptoCurrencyMarket {
  ath: Float!
  ath_change_percentage: Float!
  ath_date: DateTime!
  atl: Float!
  atl_change_percentage: Float!
  atl_date: DateTime!
  circulating_supply: Float!
  current_price: Float!
  fully_diluted_valuation: Float!
  high_24h: Float!
  id: ID!
  image: String!
  last_updated: DateTime!
  low_24h: Float!
  market_cap: Float!
  market_cap_change_24h: Float!
  market_cap_change_percentage_24h: Float!
  market_cap_rank: Float!
  max_supply: Float!
  name: String!
  price_change_24h: Float!
  price_change_percentage_24h: Float!
  roi: String!
  total_supply: Float!
  total_volume: Float!
}

type CryptoMarketOutput {
  cryptoCurrencyMarket: CryptoCurrencyMarket!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  confirmEmail(email: String!, emailCode: Float!): LoginResponse!
  createCryptoMarket: CryptoMarketOutput!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  refreshTokens(refreshToken: String!): LoginResponse!
  register(createUserInput: CreateUserInput!): User!
  resetPassword(email: String!, emailCode: Float!, newPassword: String!): LoginResponse!
  sendRegisterConfirmation(email: String!): User!
  sendResetPasswordCode(email: String!): String!
  updateAccount(updateUserInput: UpdateUserInput!): User!
  updateCryptoMarket(cryptoMarketId: ID!, input: UpdateCryptoInput!): UpdateCryptoOutput!
}

type Query {
  account: User!
  cryptoCurrencyMarketList: [CryptoCurrencyMarket!]!
  getCryptoCurrencyById(id: String!): CryptoCurrencyMarket!
}

input UpdateCryptoInput {
  ath: Float!
  ath_change_percentage: Float!
  ath_date: DateTime!
  atl: Float!
  atl_change_percentage: Float!
  atl_date: DateTime!
  circulating_supply: Float!
  current_price: Float!
  fully_diluted_valuation: Float!
  high_24h: Float!
  id: ID!
  image: String!
  last_updated: DateTime!
  low_24h: Float!
  market_cap: Float!
  market_cap_change_24h: Float!
  market_cap_change_percentage_24h: Float!
  market_cap_rank: Float!
  max_supply: Float!
  name: String!
  price_change_24h: Float!
  price_change_percentage_24h: Float!
  roi: String!
  total_supply: Float!
  total_volume: Float!
}

type UpdateCryptoOutput {
  cryptoCurrencyMarket: CryptoCurrencyMarket!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  password: String
  phone: String
  username: String
}

type User {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: UserRoles!
  status: UserStatus!
}

enum UserRoles {
  admin
  user
  validator
  visitor
}

enum UserStatus {
  isActive
  isPending
}