# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Article {
  author: String
  description: String!
  id: ID!
  picture: String
  publishedDate: DateTime!
  source: String
  symbol: String
  title: String!
  url: String!
}

input ArticleFilterInput {
  pagination: PaginationInput
  search: String
  symbol: String
}

enum ArticleOrderBy {
  publishedDate
}

input ArticleOrderInput {
  direction: OrderDirection!
  name: ArticleOrderBy!
}

input ArticlesInput {
  filterBy: ArticleFilterInput = {}
  orderBy: ArticleOrderInput = {}
}

input CreateInvestmentInput {
  baseCurrencyId: String!
  quantity: Int!
  quoteCurrencyId: String!
  valueBaseCurrency: Float!
  valueQuoteCurrency: Float!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type CryptoCurrencyMarket {
  ath: Float!
  ath_change_percentage: Float!
  ath_date: DateTime!
  atl: Float!
  atl_change_percentage: Float!
  atl_date: DateTime!
  circulating_supply: Float!
  current_price: Float!
  fully_diluted_valuation: Float
  high_24h: Float!
  id: ID!
  image: String!
  last_updated: DateTime!
  low_24h: Float!
  market_cap: Float!
  market_cap_change_24h: Float!
  market_cap_change_percentage_24h: Float!
  market_cap_rank: Float!
  max_supply: Float
  name: String!
  price_change_24h: Float!
  price_change_percentage_24h: Float!
  roi: String
  symbol: String!
  total_supply: Float
  total_volume: Float!
}

type CryptoCurrencyMarketPaginatedResults {
  count: Float!
  datas: [CryptoCurrencyMarket!]!
}

input CryptoFilterInput {
  max_cap: Float
  max_current_price: Float
  min_cap: Float
  min_current_price: Float
  pagination: PaginationInput
  search: CryptoMarketSearchInput
  symbol: String
}

input CryptoMarketSearchInput {
  ath: Float
  ath_change_percentage: Float
  ath_date: DateTime
  atl: Float
  atl_change_percentage: Float
  atl_date: DateTime
  circulating_supply: Float
  current_price: Float
  fully_diluted_valuation: Float
  high_24h: Float
  id: String
  image: String
  last_updated: DateTime
  low_24h: Float
  market_cap: Float
  market_cap_change_24h: Float
  market_cap_change_percentage_24h: Float
  market_cap_rank: Float
  max_supply: Float
  name: String
  price_change_24h: Float
  price_change_percentage_24h: Float
  roi: String
  symbol: String
  total_supply: Float
  total_volume: Float
}

enum CryptoOrderBy {
  current_price
  high_24h
  low_24
  market_cap
}

input CryptoOrderInput {
  direction: OrderDirection!
  name: CryptoOrderBy!
}

input CryptoSearchInput {
  filterBy: CryptoFilterInput = {}
  orderBy: CryptoOrderInput = {}
}

type DashboardEntity {
  diffSold: Float!
  fourthCryptos: [CryptoCurrencyMarket!]!
  lastSold: Float!
  newSold: Float!
  spent: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type InvestmentEntity {
  baseCurrency: CryptoCurrencyMarket!
  creationDate: DateTime!
  id: ID!
  investments: [InvestmentEntity!]!
  quantity: Int!
  quoteCurrency: CryptoCurrencyMarket!
  valueBaseCurrency: Float!
  valueQuoteCurrency: Float!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  confirmEmail(email: String!, emailCode: Float!): LoginResponse!
  createCryptoMarket: String!
  createInvestment(createInvestmentInput: CreateInvestmentInput!): InvestmentEntity!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  refreshTokens(refreshToken: String!): LoginResponse!
  register(createUserInput: CreateUserInput!): User!
  resetPassword(email: String!, emailCode: Float!, newPassword: String!): LoginResponse!
  sendRegisterConfirmation(email: String!): User!
  sendResetPasswordCode(email: String!): String!
  toggleFavoriteCrypto(input: ToggleFavoriteInput!): User!
  updateAccount(updateUserInput: UpdateUserInput!): User!
  updateArticles: String!
}

enum OrderDirection {
  ASC
  DESC
}

input PaginationInput {
  end: Int!
  start: Int!
}

type Query {
  account: User!
  articles(options: ArticlesInput!): [Article!]!
  cryptos(options: CryptoSearchInput!): CryptoCurrencyMarketPaginatedResults!
  dashboard(id: Float!): [DashboardEntity!]!
  fourthCryptos: Float!
  lastSold(id: Float!): Float!
  sold(id: Float!): Float!
}

input ToggleFavoriteInput {
  cryptoId: String!
  hadToFavorite: Boolean!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  password: String
}

type User {
  email: String!
  favoritesCrypto: [CryptoCurrencyMarket!]!
  firstName: String!
  id: ID!
  investments: [InvestmentEntity!]!
  lastName: String!
  role: UserRoles!
  sold: Float!
  status: UserStatus!
}

enum UserRoles {
  admin
  user
  validator
  visitor
}

enum UserStatus {
  isActive
  isPending
}